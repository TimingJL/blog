{"posts":[{"title":"哎呀！那些我在做React元件庫時，沒注意到的小細節！？","text":"刻一套元件庫，到底難不難？這個問題，從我參加鐵人賽之前，到目前已經出書了，都還一直圍繞著我。 刻一套元件庫，到底難不難？ Q: 你覺得刻一套元件庫，到底難不難？為什麼？Q: 有沒有自己或公司團隊刻過元件庫的經驗？是否能夠分享當時的情境，為什麼公司想要這麼做？希望這個元件庫對團隊帶來什麼好處？ 這個問題，從我參加鐵人賽之前，到目前已經出書了，都還一直圍繞著我。最一開始是我自己問我這個問題，「我選這個題目，到底難不難？能不能完賽？」 可能有些人覺得很簡單，有些人覺得很難。因為每個人實作的能力不一樣，或是看事情的角度也不一樣。 事實上，「難不難」這個問題，定義得有點模糊，隨著他不同的題目條件，難度也會不同。 在跟一些開發者聊天的時候，不知不覺就會發現，很多開發團隊、公司都有嘗試過想要自己刻一套公司自己的元件庫。所以，刻一套元件庫並不是那麼特別的事情，很多人都有類似的經驗，只是在不同的環境、條件之下，這些經驗會有些不同。舉例： 考量開發時間給你半年、一年的時間刻一套元件庫，當作你的年度績效，或許不難。但如果要在「30 天內」，完成一套約有 30 個元件的元件庫呢？難度就會不一樣，時間充裕的話，我們可以： 前期規劃的時候，考慮更多實作、規格的細節 不用考慮時間的急迫性，你要做得多複雜都可以，不需要為了時間而捨棄功能 實作的過程中，有時間可以除錯、優化、重構 可以仔細、慢慢的寫測試，確保每一個細節運作正常、符合規格 但如果你只有 30 天呢？你會想要怎麼取捨這些功能？ 當天有聽眾回饋或許會考慮使用一些 headless component，然後自己再基於這些基礎，實現自己想要的樣式或延伸功能 考量開發人數一個團隊一起合作完成一套元件庫？還是一個人獨自完成一套元件庫？其實各有其難處。 團隊優點： 有許多人可以一起討論，看見彼此疏忽的地方 有機會發揮 1+1 &gt; 2 的效果，開發更快 團隊缺點： 人多嘴雜，難以下決定的時候，或許會拖慢開發時間 需要訂定合作規範、統一 coding style，否則大家寫的 code 都不一樣。 跟你討厭的人/討厭你的人一起開發(處理人的問題，又是另外一件故事了) 個人優點： 自己能夠決定所有一切，自己就是主宰 較能統一風格 個人缺點： 所有事情都要自己來、所有規格、設計、實作都要自己來 只能用自己的角度看事情，沒有人一起討論，自己的盲點或疏失沒有人發現 考量元件庫的目標使用者過去在跟一些開發者聊天交流的時候，曾經被問過下面這個問題： 每一個 component 開發，你是怎麼去想他的使用者行為？或者，你當初在設計這些 component 的時候，你是怎麼讓他更 general，假設你的 UI Library 要 release 出去的時候，如何符合大部分的人期待的使用場景？ 開發這套元件是要給誰用？這確實也是在開發元件時需要好好考慮的一個面向，這套元件庫是要： 使用在自己心愛的 sideproject 上面，當然，那你就是這一切的主宰 公司內部使用，或許不同公司規模也有不同考量，假設只有一兩個團隊，那相對比較單純一點。但如果是有五六個團隊以上，每個團隊又有自己的設計師、工程師，那這樣複雜度又更高了 公開給全世界的開發者使用，可能又要考慮不同國家、各種不同情境，例如適合用在 B2C、B2B 產品？前台產品或後台產品的使用？要隨取隨用？還是要能夠適應各種客製化？考量點也又不一樣了 但我覺得，想辦法做得 general 一點，固然是很有企圖心，不過如果要顧到每一種情境和開發者，一方面難度很高，另一方面會有點失去產品的定位。就像是你要開一家服飾店，你不能設定你的衣服要符合所有年齡層、男女通吃、中式、西式、歐式、美式、各種式都能夠滿足。你要做一個社群平台，你不能讓他同時又是 FB，又是 LinkedIn，又是 IG，又是 Twitter，又是 Youtube，這樣你的產品什麼都不是。 所以，到底要做出什麼樣的元件庫？設定好特定一個族群的需求，也或許是一個聰明的選擇，你的目標很明確，也會讓產品很有特色！ 刻一套元件庫，到底難不難？回到先前提到的這個問題，到底刻一套元件庫難不難？我覺得，如果： 「自己獨自一人」+「沒有設計師幫你設計 Design Guideline」＋「時間有限(如 30 天內)」＋「需要完成的元件很多(如要完整刻一套元件庫)」＋「目標使用者設定得很 general」 那我自己個人覺得，這個任務就會變得非常難！ 但反之，若想要做一套品質好一點的元件庫，那麼，我們就應該要盡量避免上述的情況，免得讓自己深陷險境。 可以的話，組一個好的團隊，有一群好的工程師夥伴互相良性討論，然後一位可以跟工程師溝通良好的設計師、PM，時間不要壓那麼緊，適量的元件數量，並且設定好使用者對象，那麼，我相信這個元件庫將會是非常棒的！ 為何自己當初想不開，想獨自刻一套元件庫？一、面對曾經面試失利很久以前，曾經有一個面試官問我說，「你有沒有刻過什麼元件呢？」，身為一個前端工程師，當然是回答「有！」，說了一輪之後，問我有沒有做過某個元件可以廣泛被用在產品當中，例如「Button」這種元件，那我的回答當然也是「有呀！」，但下一個問題是，「那你怎麼去設計一個 Button 呢？」，當下真的因為經驗不足，所以面對這個問題有點傻住了，心想「Button 不就 Button 嗎？要怎麼去設計是什麼意思？」，所以這個面試也就在這樣的尷尬氛圍下結束。這成為我面試經驗當中一個很不堪的回憶，因此很希望能夠透過做點什麼來累積經驗，藉此彌補自己的不足。 二、覺得要湊 IT 鐵人賽 30 天，容易湊到 30 篇如這個標題所說，理由就是這麼單純，世界上元件那麼多，隨隨便便應該就可以湊到 30 個吧？一天一個，剛好 30 篇，完美！但是，開始擬定大綱的時候才發現，參考各大元件庫之後，擠出二十幾個就已經很不容易了，若真的要湊到 30 個的話，真的會需要去挑戰一些自己沒把握的元件。但所幸最後還是順利完成，可說是有驚無險。 三、覺得這個題目夠硬、夠瘋這個題目真的很硬，有理論、有分析、有實作。所以我覺得，雖然可能大家也有想過這個題目，但是應該沒有人敢衝。所以選這個題目，要跟人家重複的機會應該是很難，因此也更能顯示出我的作品的獨特性，覺得算是有亮點。很高深的技術、知識，我沒有把握，但是做一些瘋狂的挑戰，對我來說很可以，大不了咬著牙，眼睛一閉，撐一下就過去了。畢竟，痛苦會過去，幸福會來臨。 四、對自己誤會太深事實上我對這個題目難度的評估也是超出我意料之外，我想，這也算是我經驗不足的一個體現吧！選定這個題目之時，我覺得有點難，但應該沒問題。實際上頭洗下去之後，才發現，天啊，這真的有夠硬！早知道就不選這個題目了！不過既然已經深陷泥沼，也是自己選的，終究要對自己負責，還是硬著頭皮完成挑戰。 在自己刻元件之前，那些不曾想過的瑣事大家在工作的時候，不知道有沒有這樣的經驗？有些元件、功能，原本覺得應該很簡單。但是，實際上動手去做的時候，才發現跟自己原本想像的不同，很多細節是過去沒有考慮過的，會出現很多意外。 這些事情真的很多，今天我選三個小瑣事來跟大家分享： Infinite Scroll Pagination 進場/離場動畫 Infinite Scroll Infinite scroll 能在面對多筆資料時，讓捲軸滑動到底部時再載入下一頁面的資料。 相信大家對這個元件都不陌生，大部分的社群軟體，例如臉書、IG 等等，都是不斷往下滑就能夠看見更多貼文。 But how? Infinite Scroll 的特點是讓資料滾到底部時自動載入，所以這邊的關鍵是，我們要如何判斷「是否已經滾動到底部」？ Infinite Scroll 的討論在網路上非常多，但假設我們是一個新手，如果以前真的完全沒有實作過這個元件，過去也沒有看過網路上文章的分享，那你會想要怎麼做呢？ 最直覺的方法就是，對 scroll 做事件監聽，並且不斷的去計算高度。 「滾動到底部」換句話來說，就是你滾過的距離加上自己元素的高度，大於等於可滾動範圍的高度。 「滾過的距離」＋「自己元素的高度」 ≥ 「可滾動範圍的高度」 寫成程式碼大概會是這樣： 1Element.scrollTop + Element.clientHeight &gt;= Element.scrollHeight 用 React 來實現，我們可以考慮在 useEffect 裡面對 scroll 做事件監聽，當滾動到底部的條件達成時，去加載更多的內容： 1234567891011useEffect(() =&gt; { const handleScroll = () =&gt; { if (滑動到底部) { // 加載更多內容 } }; container.addEventListener('scroll', 'handleScroll'); return () =&gt; { container.removeEventListener('scroll', 'handleScroll'); };}, []); 這個做法的優點是很直覺、很簡單，基本上我們第一時間應該都可以想到這個做法。 但缺點也是很顯而易見，這些程式碼都在 main thread 上運行，需要不斷監聽 scroll 事件，每次滾動時都需要重新計算元素的位置信息，因此可能會影響性能。 即使，你不是往下滑，而是往上滑，因著 scroll 事件，這個計算的 function 還是會不斷的被觸發，顯然這是個沒有效率的做法，因為他一直在做一些無謂的運算。 當你意識到這個問題，開始想要去找一些解決方案的時候，我們就能看到許多開發者會推薦你另一種做法，就是透過「Intersection Observer API」來實現。 Intersection Observer API 的核心精神是「當被觀察者與觀察範圍重疊到某個百分比時，呼叫我的 callback function 做某件事」。 所以重點有三個，「觀察者」、「被觀察者」、「要被呼叫的 callback」。 以上圖來說 觀察者：藍色的框框就是我們觀察的範圍，上述例子是 Browsers viewport。 被觀察者：我們可以看到藍色框框下面有一個深色矩形，這表示被觀察的對象。 要被呼叫的 callback： 當被觀察的深色矩形因著滾動事件進到藍色的框框的可視範圍內，就觸發這個 callback，裡面做的事情就是去加載更多內容進來。 詳細的實作方式我就不在這邊說明了，我想說的是，直覺的做法固然很好，也很有用，但是如果能夠參考別人的做法，就能夠得到意外的收穫和學習！這是我曾經忽略的部分。 參考文章： React window 與 IntersectionObserver API 實現無限捲動 Dcard 文章閱讀器之心得紀錄 — Kyle Mo 如何用 Intersection Observer API 實作 Infinite Scroll/Lazy Loading — Shubo 的程式開發筆記 Pagination Pagination 是一個分頁元件。當頁面中一次要載入過多的資料時，載入及渲染將會花費更多的時間，因此，考慮分批載入資料的時候，需要分頁元件來幫助我們在不同頁面之間切換。 情境一當我們開開心心的完成了一個 Pagination 元件的時候： 我們是否能夠想到，會不會有一天他會變得太長呢？如下圖： 我個人覺得，能夠想到這一步其實就已經蠻厲害的了！ 過往比較沒有經驗的時候，通常會忽略頁數太長的問題，因為自己在測試的時候通常覺得功能沒什麼問題就 ok。剛剛上到正式機，因為資料量也還沒那麼多，所以也不會發現問題。等到使用者新增的資料越來越多，才發現，怎麼頁數會變這麼多！或是使用者發現怎麼破版了！這時候才會突然驚覺糗大了！ 所以我才覺得，能夠在這之前就發現，真的是擁有豐富的經驗，或是曾經被這件事情給雷過。 在行動裝置普及的當代，Pagination 太長很容易造成破版，因此需要適當的縮短節點。但是，縮短節點應該要怎麼處理？ 在沒有時間考慮太多的情況下，我想了一個規則來縮短節點： 留頭、留尾 留 current — 1, current, current + 1 這幾個 page 其他的都省略 成功縮短之後成果如下圖： 看起來有模有樣的不是嗎？我當初真的覺得自己很聰明… 但事實上，這樣想還是太單純了，怎麼說呢？ 想想看，考慮到邊界狀況，例如頭尾剛好就是 current + 1, current — 1 ，我們可能就會這樣處理： 另外，符合上述三個規則的還有這樣： 符合上述三個規則的其實有各種可能性，簡單條列一下如下圖： 有沒有發現一件事？我們的 Pagination 居然在不同的邊界條件之下會有不同的節點數量，會像金箍棒一樣變長變短。 因此，使用者沒有辦法透過你的 Pagination 做「連續點擊」。換句話說，當你的 Pagination 會忽長忽短的時候，使用者在滑鼠游標位置不變的情況下，有可能會點擊到他預期以外的節點。 這真的是非常的糟糕，就像是你在看漫畫網站的時候，想要點下一頁，卻不小心點到突然跳出來的色情網站廣告一樣慘，因為你媽媽可能要叫你去吃飯的時候來到你房間，而你剛好就在那個不小心的時間點出意外。 因此，要如何讓 Pagination 能夠固定長度，確保使用者不會不小心點到他不想要點的按鈕？這真的也是容易被我們忽略的小細節呀！ 情境二Pagination 是一個很常見的元件，因此在各個產品上面都很容易發現他的蹤跡。也因此，常常他也需要為了符合各個產品的情境而需要做出對應的調整。 有時候我們需要不同樣式，但同樣邏輯的 Pagination。例如： 比較龐大複雜的系統，為了符合不同頁面功能的需要 一個大公司內部有好多個不同產品的團隊，雖然公司有內部開發的 UI Library，但是不同產品希望有不同的樣式 開放給大眾用的 Pagination，希望盡可能做得 general 一點那該怎麼做才能夠讓這個 Pagination 能夠 general 一點呢？ 其中一個很直覺的想法就是，或許我們可以用 props 來控制各種可以客製化的屬性，例如節點大小、填充模式、顏色、外觀是否有圓角、隱藏節點的時候該保留幾個兄弟節點…等等。 要客製化的話，會有非常多的屬性可以設置，但是，如果這些屬性全部都由 props 來控制的話，那想必你的 Pagination 有可能就會變成下面這樣： 12345678910111213141516171819&lt;Pagination classes={classes} size={size} variant={variant} defaultPage={defaultPage} page={page} pageSize={pageSize} disabled={disabled} color={color} shape={shape} siblingCount={siblingCount} boundaryCount={boundaryCount} hideNextButton={hideNextButton} hidePrevButton={hidePrevButton} showFirstButton={showFirstButton} showLastButton={showLastButton} onChange={onChange} ...其他/&gt; 我想，看到這樣千瘡百孔的 props 傳入的時候，必定會眉頭一皺，因為這樣真的很不容易看出這個元件長什麼樣子，密密麻麻的，很難閱讀也很難維護。 而且 props 太多的話，到時候我們的 Pagination 要用在各個頁面的時候，也會很難移植，因為你必須要確保每一個 props 傳入的值都是你所預期的，未來要改也會很難改，因為東西一多，就可能會漏東漏西。 就在這個時候，我發現 Material UI 提供了一個令我醍醐灌頂的想法，「usePagination」。 usePaginationFor advanced customization use cases, a headless usePagination() hook is exposed. It accepts almost the same options as the Pagination component minus all the props related to the rendering of JSX. The Pagination component is built on this hook. 一個天外之音打進我的心頭，「誰跟你講元件一定要帶有樣式？」 usePagination 很漂亮的把 Pagination 的邏輯和選染樣式拆開來處理。usePagination 只處理邏輯的部分，而樣式的部分則留給開發者自己客製化。 因為這是一個「React」的元件庫，因此他使用到了 React 的特色，Custom Hooks 來實作，這點我真的覺得很厲害！ 在 React 中，Custom Hooks 是一種函數，它們可以讓你在多個組件之間共享邏輯、狀態和行為，從而幫助你更好地組織和重用程式碼。 如果我們把邏輯跟樣式分開，邏輯的部分共用成 usePagination 的話，這樣各團隊就能夠共用程式碼，也能夠擁有自己客製的樣式了。 簡單示範一下 usePagination 的使用： 1const { items } = usePagination({ count: 10 }); 我們只需要傳入適當的參數，就能夠得到一系列的節點，這些節點包含了每一個節點所需要的資訊還有被點擊時觸發的事件，例如上一頁、下一頁： 12345678910const items = [ { type: 'previous', onClick: () =&gt; {...} }, { type: 'page', page: 1, isCurrent: true, onClick: () =&gt; {...} }, { type: 'page', page: 2, isCurrent: false, onClick: () =&gt; {...} }, { type: 'page', page: 3, isCurrent: false, onClick: () =&gt; {...} }, { type: 'page', page: 4, isCurrent: false, onClick: () =&gt; {...} }, { type: 'page', page: 5, isCurrent: false, onClick: () =&gt; {...} }, ... {type: 'next', onClick: () =&gt; {...}},]; 「誰跟你講元件一定要帶有樣式？」這句話真的帶我從原本固定習慣的思維當中跳脫出來。 進場/離場動畫 在寫前端應用程式難免會碰到需要動畫的時候，尤其是元件的進場與離場動畫。例如 Modal, Drawer…等等。 動畫在前端介面當中， 真的扮演了畫龍點睛的角色。 想想看，如果我們很生硬的直接把元件塞進畫面，那元件在使用者看來就會很「突然的」出現或消失，像是下面這樣： 這真的是非常的突兀、非常不優雅！ 因此，為了比較好的使用者體驗，我們會讓元件「優雅的」進場或離場，例如滑入 (Slide In)／滑出 (Slide Out) ，所以我們加上一些 transition： 1234567891011121314151617const DrawerContainer = styled.div` background: #0B87FF; height: 100vh; width: 300px; position: fixed; top: 0px; transform: translateX(${props =&gt; props.$open ? '0' : '-100'}%); transition: transform 0.35s;`;const Drawer = ({ open }) =&gt; { return ( &lt;DrawerContainer $open={open}&gt; Content &lt;/DrawerContainer&gt; );}; 我們可以看到上述程式碼當中，透過 styled-components 的 props 傳入，來控制元件的樣式，因此，我們就會得到了一個擁有優雅動畫的 Drawer 元件了： 看起來真的是令人通體舒暢不是嗎？ 然而，當你沉浸在這個優雅的動畫中時，突然開啟了檢視原始碼，就會赫然想到一件令人介意的事，那就是，當 Drawer 離場之後，他的節點在 DOM Tree 裡面還是沒有消失，只是使用者看到的畫面消失而已。 因此，為了讓節點可以消失，所以除了動畫的 open 以外，我們再把 open 拿來控制節點是否渲染： 1234567const Drawer = ({ open }) =&gt; { return open &amp;&amp; ( &lt;DrawerContainer $open={open}&gt; Content &lt;/DrawerContainer&gt; );}; 這樣，我們同時有了可以控制動畫的 props，也會在 open 變成 false 的時候把 Drawer 元件拿掉。 但事實上真是如此嗎？我們來看一下成果： 你會發現你又回到了不優雅的樣子…… 雖然這個方法解決了節點不渲染在 DOM Tree 上的問題，可是原本寫的 transition 動畫卻消失了！ 原因是若直接把元件拔掉，他沒有時間可以做 Transition。 我的天啊！原來這件事情比我想像的還要複雜許多！ 可是我們觀察那些常用的元件庫，例如 MUI，卻可以發現 Drawer 在離場的時候，DOM Tree 裡面的節點會被移除，並且擁有非常優雅的動畫： 這表示，我們想要保持優雅動畫的同時，要控制 Drawer 退場後在 DOM Tree 裡面的節點會被移除這件事情是可行的，只是我們的方法或想法錯了。 仔細想想，只透過一個 boolean 來控制的話，有點難同時做到這個效果。因為滑入、滑出，跟是否在 DOM Tree 當中渲染，是兩件獨立不同的事情。沒有一開始想的那麼單純。 那我們有可能的解決方法如下： 使用 setTimeout 搭配 open/visible 兩個參數分別控制這兩件事 使用 react-transition-group 等處理動畫的套件幫忙 其他厲害的方法 犯了這個蠢，確實讓我思考了一些事。有時候我們乍看之下很自然、很簡單的東西，仔細觀察之後會發現其實有很多巧思在其中，瞭解他的巧思之後，不禁會對這個元件設計的用心敬畏三分。 總結在做元件庫的過程當中，除了今天小聚提到的幾個主題之外，還有許多我沒注意到的小細節，例如 Controlled vs Uncontrolled 的問題、props 參數命名的問題、元件庫整體性一致性的問題…等等，有許多小細節在實作的過程當中值得拿出來討論。 另外，在忽略這些小細節的過程當中，越來越覺得自己關起來蠻幹是一個對工程師而言自殺式的做法，所謂「獨自做一套元件庫」並不意味著你的環境沒有人可以跟你合作。不願意傾聽別人的意見和想法，覺得別人的想法都不如自己、都有疏漏，其實也是一種閉門造車。然而，如果你的團隊裡面只有你一個人，也不代表沒辦法跟別人交流，現今網路這麼發達，懂得尋找資源，也能夠避免讓自己成為井底之蛙。 最後，有時候我們乍看之下很自然、很簡單的東西，仔細觀察之後會發現其實有很多巧思在其中，有他厲害的地方、值得學習的地方。事實上，不只是對自己手上的專案是如此，對於身邊的人、合作的同事也是一樣，在這部分我也是有深刻的感觸。 參考https://www.tenlong.com.tw/products/9786263332898 React.tw 小聚Reactjs.tw 社群小聚 16(2023/03/23)，這是我第一次參加小聚，沒想到第一次參加就要上台分享，真是讓人感到非常緊張，而且上半場是帥哥大神 Kyle Mo，分享得非常得精彩！ 不過也感謝有這次的意外，才能夠在職涯過程當中有這樣難得的經驗。如果不是意外的話，我自己可能都沒有勇氣站上台吧！ 真的感謝在場的聽眾給予熱情的回饋，從觀眾的問答當中我也收穫了很多，希望大家能夠繼續彼此交流，彼此成長！ （附上這次分享的投影片連結） 活動記錄","link":"/2023/03/24/%E5%93%8E%E5%91%80%EF%BC%81%E9%82%A3%E4%BA%9B%E6%88%91%E5%9C%A8%E5%81%9AReact%E5%85%83%E4%BB%B6%E5%BA%AB%E6%99%82%EF%BC%8C%E6%B2%92%E6%B3%A8%E6%84%8F%E5%88%B0%E7%9A%84%E5%B0%8F%E7%B4%B0%E7%AF%80%EF%BC%81%EF%BC%9F/"},{"title":"2023 WebConf 為自己留下記錄的參與心得","text":"如果十年後我還是跟現在差不多，那絕對不會是我自己期待的樣子，所以今天也想特別留下一點記錄，一方面不要忘記自己這次得到的收穫，另一方面也不斷提醒自己，努力不要成為十年後想起當年會後悔的模樣。 好險我買票了這次參與了 2023 WebConf，當初看到 FB 和官網在宣傳的時候，就覺得一個 Conference 隔了十年再辦，這背後的動機一定不簡單。所以自從得到資訊之後，我就一直很期待這個 Conference。不過這次的票價也是不便宜，所以「到底值不值得？」這件事情討論度也很高。 為了這件事情我還特別去瞭解一下自己的公司有沒有相關的教育補助和公假可以支持員工參與這樣的活動，所幸公司也有相關的福利，所以毅然決然就下定決心要來參加，畢竟前幾年疫情也沒有機會參與實體的活動，而且看了講者名單也很令人期待。 這次好像總票數是 600 位，盲鳥票就佔了 400 張，雖然票價有點高，但是也是不到幾十分鐘就一掃而空。真是可怕。還好原本就下定決心一定要去，沒有在那邊猶豫半天，所以一開賣就衝進去買了。聽完兩天之後回過頭來想，真的覺得當初真的買對了(雖然還是希望票價能夠低一點🤣)。 十年2023 年絕對是令人難忘的一年，從各種意義上來看都是這樣的感覺。 今年是 WebConf 第二屆，那第一屆呢？在去年嗎？不，是在十年前，2013 年。今年的許多場次都不斷提到「十年」這個單字，因為有許多講者在第一屆都有上台講過，因此也都分享自己十年前上台的照片，看完真是覺得「哇！」這好有歷史意義。 十年，這是個什麼概念呢？感覺是說短不短，但說長的話，也是稍不注意就一晃眼過去的時間。2013 年好像是我剛考上研究所的那一年，那時候連自己未來的職涯都還沒有方向，也還沒進入 Web 領域。但當年這些前輩們就已經在這個領域耕耘，甚至這次也聽到 Orange 大大說他 2013 年上台分享的時候才大二，真是令人佩服！十年後的今天已經有許多卓越的貢獻，並且是公司的資深資安研究員。 這次坐在台下的我就在思考，十年前我還在混沌當中，那十年後我是什麼呢？雖然我很難想像我十年後會是什麼，但我覺得，如果十年後我還是跟現在差不多，那絕對不會是我自己期待的樣子，所以今天也想特別留下一點記錄，一方面不要忘記自己這次得到的收穫，另一方面也不斷提醒自己，努力不要成為十年後想起當年會後悔的模樣。 議程這次的講者陣容真的非常的強大，如果可以的話每一場真的都想去聽。但可惜自己還沒學會影分身之術，而且這次主辦單位考量到講者們覺得如果沒有錄影，可以更暢所欲言，所以活動沒有錄影。 因此在這次選擇要去聽哪一場的時候真的非常糾結，雖然幾乎每一場我都非常想要去聽，但也只能乖乖的排課表。以下記錄一下「預計」的課表，雖然我大部分都是按照課表去走，但有時考慮到場次之間休息只有 10 分鐘，一下要跑十樓，一下要跑十一樓，場次轉換的時候也怕自己沒有位置，所以有些就沒有照課表了。 主題心得主題：活用 GitHub Copilot 開發 Web 應用程式 講者：Will保哥簡報：https://drive.google.com/file/d/1W7KZ2vwsZyyIC_iMdCxgadXWodWkrU6u/view共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FT5tQ48y8S5GQkAUx9qlgng 今年 Copilot 正夯，我們公司也是看好未來 AI 的發展，如果員工願意透過使用 ChatGPT 或 Copilot 等 AI 工具，幫助員工提升工作品質及效率，也是支持員工勇於嘗試新工具，也有考慮願意補助這個項目。 也由於公司有表達這個意願，所以我也大膽開始使用 Copilot 在撰寫程式上。因此這次我也是很期待這個主題，畢竟自己對於這個工具還不是很熟練，只是用到一點皮毛。 這次也是我第一次聽保哥現場演講，對我而言也是久仰大名。聽別人演講，除了內容值得學習之外，怎麼演講也是值得學習的一環，這次真的令我大開眼界🤣。 畢竟 Copilot 也問世沒多久，所以看得出來保哥也是還在摸索這個工具，讓我彷彿看到一名老練的牛仔正在馴服這匹桀驁不馴的野馬或是野牛。選擇這個題目來演講也是需要相當的演講經驗和勇氣。這次也是有 Live Demo，當然，也逃不過 Live Demo 魔咒🤣🤣🤣。在家試就好好的，一上台就出乎意料，真不愧是生成式 AI。 如果是我的話，面對這種題目我絕對是不敢 Live Demo，我應該只敢先錄好影片當作投影片素材。但即使面對 Live Demo 魔咒，保哥還是不驚不慌，完全沒有影響他的氣勢和自信，台下大家也是覺得很有趣，畢竟人之常情唄。能夠 Live Demo 當然效果一定是很令人震撼，雖然也有很多漏氣的時候，但瑕不掩瑜。一個經驗豐富的演講者的功力就是在這種時候展現出來，我只能給個讚👍。這種危機處理和臨危不亂的態度也是值得令人學習。 這次演講大概就是分幾個 Copilot 的優缺點來講，然後也鼓勵大家勇於嘗試，分享一下到目前為止的使用經驗和心得這樣。雖然沒有什麼高深的內容，但說到底講者也是一名實踐家、技術探險家。我覺得這也是蠻令人值得效仿的，想要走在時代的尖端就是要勇於去嘗試這些新事物、新工具。他各種 Copilot 相關的工具也都去用用看，使用完之後也清楚的整理出各個面向。所以雖然大家都一起關注和面對這個新的 AI 工具，有些人能夠成為先驅者並掌握他，有些人只能當跟隨者，我想差別就是在這裡吧。 主題：AI 驅動下的開發者體驗 講者：Ruddy老師簡報：https://1drv.ms/f/s!AtlpfGB0RrJolasV8HV8C470Vwy6yA?e=tpZUiA共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FTz4XDh74SqGDDZiGcWBaKg Ruddy 老師這一堂課給我們許多啟發，在 AI 的驅動之下，我們該怎麼去面臨這些改變所帶來的影響？ 開發者體驗(Developer Experience)是我過去沒有仔細想過的事情。身為一個工程師，我們平常的工作就是致力去改善使用者體驗，努力排除使用者在操作上的抱怨和困難。 將開發者視為 End user，將工作過程的技術協作與團隊協作看做產品與服務，關注 Developer 開發中的感知與反應，致力消除產品與服務所帶來的摩擦 但在 AI 的驅動之下，開發者體驗確實受到相當大的影響。從今年開始的開發方式將與過往完全不同，我們有 AI 的輔助。但這樣的輔助是助力還是阻力呢？雖然 Copilot 會給予各種提示，非常方便，但尚未熟練開發工具操作時，這些提示反而容易打斷工作流程和開發者的思緒。 至於是助力還是阻力，說到底也是取決於工程師本身。Ruddy 老師這麼說：「專案開始之初，要先看到全貌」。如果你腦袋空空就來寫程式，只想看看 AI 的提示會給你什麼，被 AI 拎著鼻子走，那這也將會是一種阻力，阻擋我們學習、阻擋我們進步。所以「看見全貌最好的方法就是提問」。透過對自己的提問，將這個全貌在腦中建構出來之後，那 AI 將會成為你開發的助力。這真的是非常深刻的一席話。所以，回到那個老問題，AI 到底會不會取代開發者？透過這席話的思考，這個答案將會變得清晰。一個理想的生產力工具要能協助開發者處理掉雜事，讓用戶(指的是開發者)專注在任務上，而不是一直去打斷開發者的思緒和專注度。 「面對 AI，我們應該以學習為中心，而非以獲取知識為中心」。創新的過程 是模仿-&gt;轉換-&gt;合併。知識吸收再多，沒有化成具體行為、發生改變的話，這叫做囤積知識，沒用。 嬰兒通過模仿成人來學習; 藝術家通過模仿大師來學習; 程式員則透過 copy paste 來學習 最近 AI 出世之後，大家一直在討論「人類會不會被 AI 取代？」。其實我覺得應該換個問題來問，「你想要選擇被取代？還是選擇不被取代？」。面對 AI 生成式的結果，我們知道他是蒐集了全世界巨量的資訊的產出，但我們使用 AI 到目前為止，我們知道這些生成式的結果不一定都是對的。那我們有沒有能力去判斷這些知識的對錯呢？還是我們只是選擇一味的接受？懶得去思考這些事情的人，我想就是選擇被取代的那一方。 最後一個提醒是，我們在某個領域的能力越低，就越可能高估自己的能力。「懂得越少的人，越容易自以為是，而忽略了學習。」因此這邊帶我們思考，「AI 在無知上面能夠做什麼？」。最大的敵人不是無知，而是認識不到無知本身。換句話說就是「不知道自己不知道」，所以自我察覺很重要。當然我們可以透過 AI 的趨勢預測來減少我們對未來的無知，透過對 AI 提問來減少無知，AI 也能幫助工程師發現他們可能未曾意識到的問題和挑戰，並提供解決方案。但回到那句老話，面對 AI 帶給我們的知識的同時，也要對這些部分進行評估和批判，讓自己的思考和意見越來越成熟。 主題：WebComponent 的好，用過的都知道 講者：奶綠茶簡報：https://speakerdeck.com/milkmidi/webcomponent共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FqY9O-dlVTgWWUbrgsYdf4w 奶綠幫我們回顧一下十年前那些當紅的技術，以及在這十年當中他們是怎麼死的。反思我們現在用的這些當紅的技術，在未來的十年當中是否還能夠存活下來？ 這真的是一個很可怕卻也很現實的問題不是嗎？在技術日月異的時代，我們很難對某個技術孤注一擲，並相信他能夠養我們到終老、退休。何況現在老年化社會的加速，加上醫學的進步，退休的年限勢必會再往後延。而且今年 AI 快速崛起，又更快的加速這種技術的迭代。現在大家都在擔心「中年失業」，我相信不久的將來，「老年失業」這個名詞和這種擔心也會逐漸出現，並取代「養老」這個概念。 總之，基於這種擔心的前提，我們必須要提前做些準備，例如學習某個十年後最可能不會被消失的技術。奶綠他下的賭住就是「WebComponent」。 所以主旨就是講一下為何他做出這個選擇？WebComponent 的優勢在哪裡？例如他是一種新的瀏覽器底層 API，意味著我們不用像目前三大框架那樣需要引入函式庫才有辦法被使用。然後他也能有效的解決全域污染、耦合性的問題。當然也有相對應的缺點，和他提出的解決方案。 對我而言的收穫就是，WebComponent 好像蠻值得投資去探索看看(讀書清單又多了一個項目了😅)。當然，除了 WebComponent 之外，基於前面那個思考，應該也要時時關注技術變化的趨勢，真的是要活到老、學到老。最後講者也給了一個提醒： 學習不需要為公司、長官或同事不需要為別人，只需要為自己 主題：成為前端建築師吧！透過 Frontend Infra 為前端應用打造穩健且高效率的開發體驗 講者：莫力全 Kyle Mo(老莫)文章：https://oldmo860617.medium.com/成為前端建築師吧-透過-frontend-infra-為前端應用打造穩健且高效率的開發體驗-21566b5c95d3投影片：https://slides.com/oldmo860617/minimal共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FcPQikssETpSBS33EgKkQKw 這是我第二次聽老莫演講(第一次在 Dcard)。 老莫也是我很敬佩的開發者之一，透過他的 IG 可以感受到他對知識的掌握非常快速和非常有熱忱，內容也都很有深度，常常也會有比較深刻的反思。 這次的題目著重在他擅長的 Frontend Infra 領域。介紹了什麼是 Frontend Infra？以及 Frontend Infra 解決了什麼問題？ 其中有一個最有趣和最核心的部分是他對 Frontend Infra 的使用時機提出了質疑，「只有大規模組織適用 Frontend Infra 嗎？」「如果是小專案或小團隊，還能導入 Frontend Infra 嗎？」。這個問題讓我的眼睛為之一亮，因為畢竟不是每一個人都有機會進入較為有規模的組織。特別是在台灣的軟體環境，鼓勵大家創新及創業，因此絕大部分的公司還是中小型企業，也很多是新創軟體公司。 Frontend Infra 這個詞通常被用來描述為了提升「開發效率」和「產品品質」而導入的一套系統、流程或工具，並且常常包括一些關於如何使用這些工具和系統的最佳實踐或標準。 重點就在於「開發效率」與「產品質量」這兩個要素，老莫認為只要符合這兩個規範，任何嘗試都可以被算在 Frontend Infra 的範疇裡。 老莫也從過往舉自己過往在小專案當中導入 Frontend Infra 的親身實踐案例給我們當參考。我覺得這樣的分享真的非常有幫助，他讓我看見在小型專案中使用 Frontend Infra 的可行性，並且有跡可尋。 如果架構設計脫離了實際業務需求，那就是在瞎忙。調整軟體架構必須深入理解需求，參與需求討論，並透徹理解需求背後的業務本質。 最後還是要提醒我們，核心並不是要我們無腦導入 Frontend Infra，如果專案沒有這方面的需求，只是一味追求很潮很酷，好像你沒有 Frontend Infra 很弱，若陷入這種迷思就急著導入的話，真的比起得到好處，更多的是增加維護成本和成為團隊的負擔。 主題：建立高效的遠端協作團隊：策略和實踐 講者：劉艾霖(Ailin Liou)簡報：https://docs.google.com/presentation/d/1bNjm5viq2tBsw4u9kFcX5zlL0B6BymFctU8IeqyW4NM/edit共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2F0ay5VmSyQf25vtI8rvRfLA Ailin 也是我很期待的講者之一，因為我也有加入遠距工作者在台灣 (work remotely in Taiwan)這個 FB 社團(目前1.8萬人)。 我自己也是對於遠距工作很想嘗試也很嚮往。畢竟人也是有嚮往自由的天性。 我每次只要想到我每天要在辦公室要待滿 8 個小時，不斷的產出程式碼，我就覺得自己就像雞舍裡面的雞一樣🐔，每天就是關在那狹小的籠子裡面，不斷的吃飼料和下蛋🥚🥚🥚。 想到這裡就會覺得自己還蠻悲哀的，這是我小時候最不希望自己長大之後變成的樣子，但是沒想到我還是沒有逃離這種命運。這時候就會開始思考自己剩餘的人生以及其意義。就算有人告訴你應該要透過公司做社會貢獻和把自我成長當成自己的目標，還是沒有辦法改變我們嚮往自由的渴望。 如果有一隻雞厭倦了待在籠子裡面下蛋，然後你試著告訴他一些成功學，讓他調整心態，教他調整吃飼料的節奏和姿勢，給他聽莫札特的音樂，教他運動的方法，成為一隻健康強壯的雞，下出品質更好的蛋，也提升下蛋的效率，這樣對這個雞舍和對雞的身心靈都有好處。你會不會覺得這樣的事情非常荒唐？你會去取笑這隻雞嗎？這隻懶惰、不守本分和整天愛做白日夢的雞？可是把主角從雞換成是人的話，你卻會覺得這是很合理的。 以上是我個人的抒發，跟此次演講無關🤣。 遠端工作也不完全只有好沒有壞，我們常常去嚮往這些好處，但卻很少去思考這些壞處，因為有些東西真的是沒有遇過就很難去想像居然還有這種情境。 Ailin 這次的分享我覺得真的很務實，雖然遠端工作有一些缺點和難題，可是這些難題並不是完全沒有解決方案，而是你願不願意想方法去解決這些問題。疫情期間許多公司實施遠端，但疫情一結束，就收回來了。其實真的非常的可惜，其中有許多的理由是因為那些遠端工作的缺點和壞處，但這些公司大多沒有努力嘗試去解決這些問題，反而是更偏好回到原本的舒適圈。我們都知道找理由是無法解決問題的，但為什麼這種處理問題的態度卻不用在面對遠端遇到困難的時候呢？我個人是覺得還蠻雙標的。 遠端工作真的需要公司和員工雙方的努力才有辦法達成。當你克服這些困難的時候，相對應的你就能得到他所帶來的好處。我過往的工作經驗通常是一週有一兩天能夠在家遠端就很不錯了，沒有待過完全遠端的公司。所以這次聽 Ailin 分享也覺得特別有收穫，也打開了眼界。 遠端工作他很彈性，但也不代表他沒有規範。如果沒有基本的共識，會沒有效率，所以還是要有基本的準則存在。透過這些規則，因著遠端所帶來的問題也有可能被解決。例如休假也有休假的準則，有超過兩個小時聯繫不上，就須要請假，畢竟自己的彈性和自由不能影響到工作的進度、影響到其他人。另外在人與人之間的交流也是如此，雖然遠端無法實體見面，好像就失去了一轉頭就能跟同事聊天的優勢，或是可以亂入人家會議室來獲取資訊的優勢，但其實遠端還是有方法可以刻意製造虛擬的茶水間環境、刻意製造透明度，讓這樣的優勢能夠在線上繼續保持下去。 在實行遠端的公司也有許多要注意的地方，有些公司一週遠端幾天，在這種前提下，很容易帶著「過兩天就要見面了，比起花時間寫文件，不如到時候見面講一講比較快」的這個想法，而忽略寫文件的重要性。或者，有些公司會把難得的實體見面機會拿去開會，在 Ailin 看來這些都很可惜，應該要珍惜實體見面機會，遠距就可以做的事不要拿到實體做。我覺得這也是我過去很少去思考過的情境。 最後提到的一點我也很認同，就是要選擇正確的學習對象。例如有些公司收回遠端政策的理由是，因為 Google 也都採取這樣的策略了，他們一定有嚴謹的考量，所以我們應該效法這些知名國際大廠。但事實上，這是一個誤區，我們應該要學習和效仿的，不是那些雖然知名，但不太擅長遠端工作的公司。有些公司打從娘胎開始就是以遠端工作文化起家，他們有完善和良好的制度，也在這方面有豐富的經驗，並不是因為有些國際大廠，因為他的知名度和影響力，就覺得他什麼都是對的，什麼都要效仿他們。 當然，高層的心態對於遠端的政策成功與否也是有重大的影響。而公司的文化與商業策略，也與這個政策息息相關。 主題：那些理所當然，卻像空氣般重要的小事：談開發流程、程式架構與職涯發展 講者：PJ (陳柏融)共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FGmg_L6YOT-yMko_qZ_pEeg 這個主題原本看的時候有點不太知道是什麼意思，但聽完演講之後再回來看這個主題，就會有一種「這說得實在是太好了」的感覺。 那些理所當然，卻像空氣般重要的小事？到底是什麼事？ 我認為這是一位經驗豐富的工程師對於平常被視為理所當然的事情的反思。這樣的思考真的相當的深刻。 當它變成習慣的時候，你就忘了它是個麻煩 這句話貫穿了這個主題的脈絡與核心。這讓我想起以前在看信誓蛋蛋荒野求生的時候，原本我們在文明社會，享受文明社會帶來的方便及美好，這些東西成為我們生活中的一部分，你並沒有覺得他有什麼了不起，並沒有特別珍惜。但是當你只帶了一支小刀就單槍匹馬要在一片荒野叢林裡面求生的時候，原來以前那些習以為常的事情都是一種享受。 所以，什麼是奢侈？在一做荒島上面想喝一口淡水？晚上睡覺能夠不被蚊蟲叮咬？能夠有一個遮風避雨的地方？能夠吃上一口煮熟且有調味的肉？原本在文明社會很微不足道的事情，在此時都成為一種奢侈。 我們進入一個強大的團隊的時候，所有的 Frontend Infra、CI/CD stage 都幫你建好，有完整的開發流程、測試、制度、Eslint 設定、Jira card 下 Label 等等，你完全不需要擔心，只需要專注在開發上面就可以。 但今天如果環境不是如此呢？你就會覺得，怎麼這個也沒有？那個也沒有？這些不是很基本嗎？這些想法就會冒出來。這時候你前面就會出現兩條路，一條路是持續的抱怨，一條路是想辦法去解決他。 PJ 也告訴我們一個很重要的觀念，「你也是團隊的一份子，不要被角色侷限住」。DevOps 相關的建置，一定要由 DevOps 工程師來做嗎？這流程的東西不就是 PM 要處理的，關我什麼事？但如果我們自己放下這些想法上的侷限，或許團隊就會因為我們的付出而變得更好。 你可以不用是做的人，但要能說出來你要的是什麼 這個觀念是，雖然很多事情我們可以主動去做，但或許也不是每一件事情我們都有辦法親自去解決。舉例來說，可能我們曾經用過某個自動化的功能覺得很棒，但現在的團隊裡面沒有，雖然你不知道那是怎麼做的，但或許你可以去找相關專業的同事來討論，這件事情就會在你「說出來你要的是什麼」之後順利被解決，這也是對團隊的正面幫助。 主題：從專業到商業：十年軟體架構變遷 講者：Ant(曾義峰)共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2F00roPb7NQKOEHNoFGT6hig 思維孤島專業與商業？哪個好？兩個都很好。但是在解決問題的討論的時候，通常會發現這兩種人的思維不太一樣。如果我們只保持自己本身專業上的思維的時候，有時候很難把別人的想法放到我們這邊。如果這樣的思維存在的時候，我們也很難把這樣的想法影響別人，讓別人接納。商業的人可能會覺得專業的人很死腦筋，專業的人會覺得商業的人死愛錢、畫大餅。但並不是說誰好誰不好，而是應該要去瞭解彼此思維上的不同。彼此多一些瞭解，世界也會多一些美好。 十年假如你是個面試官，今天來面試的一位是現在的你，一位是十年後的你，你會選用哪一個人？這真的是大哉問，假設今年我們是 24 歲，十年後是 34 歲。34 歲的我們可能已經開始有一些人生規劃，例如結婚、生子、買車買房，因此你對薪資也有更多的期待。但在 24~34 這時年當中，我們多累積了哪些東西？這些東西有沒有辦法讓我們去跟 24 歲的自己拼薪水？透過這樣的想像，讓面試者有辦法站在面試官的角度去思考和一起討論，到底這間公司的文化與求職者有沒有匹配。 十年的期間真的會有很大的轉變，許多公司的興起以及衰落，許多技術的興起以及衰落。回歸到自己身上，瞭解到自己在做什麼也是很重要的，你做的事情的價值是什麼？你做的這個服務，他服務多少人？這些人有沒有得到幸福跟快樂？人生成就感上面也是，我到底退休之後要跟我的孫子講什麼？所以價值體現是很重要的。那我要如何體現我的價值？我要去瞭解我的客戶，不論是開發、維運、資安等等，到底我工作的價值在哪？我為多少人創造了幸福？ 聽完 Ant 大大的一席話，真的深刻的感受到前輩功力的深厚，以及對於整個專業和商業思維的瞭解和融會貫通。說實在的，像自己這麼渺小又沒有經驗的人雖然知道前輩講的很有道理，但卻也因為經驗不足所以有點難完全體會。希望今天前輩的一席話，能夠讓十年後的我也能站在更高的高度來看見整體的樣貌，希望那時候更能體會這些話以及背後的想法。 主題：從共憤走向共創：如何拉齊工程師與設計師心中的「品質標準」 講者：Kat (王蓁妮)簡報：https://www.canva.com/design/DAFoe-vbrqQ/p1xmRii8Ze-0BgUSoY3IDw/view#1共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FdiYoNrNbQQW0BLLQOm6DeA 就像是 Ant 大大講的那樣，商業與專業兩種人必須要互相理解，才有辦法共創美好。Kat 也是討論同類型的主題，工程師與設計師之間，應該要如何才能夠互相理解、互相溝通，才能夠一起共創高品質的產品？ 第一個關鍵是「說共同的語言」。我覺得 Kat 舉的例子真的很生活化也很有趣。「設計師到底要不要學程式語言？」這個問題類比成「我去日本旅遊要不要學日文？」就算你完全不會日文，也能去旅遊，只是可能會產生不少溝通障礙。但如果你學了幾句基本的日文，不只可以讓你旅行得更順利，也能快速拉近跟當地人的距離。反過來，如果有一個外國人來台灣旅遊，跟你問路的時候講中文或講台語，我相信那一定是個令人感到美好的經驗，也能夠拉近彼此的距離。 「設計師常常問：這個做得到嗎？」這個問題真的是工程師和設計師合作時一定會經歷的對話。以工程師自豪的專業來說，要他說出「做不到」真的是太傷自尊心了，不太有人會這麼說。事實上，其實也是這樣，論可行性的話，其實不要太新奇或離奇的規格都可以實現。但其實問題常常不在於他的可行性，而是在乎實現這種東西的時間成本，以及後續維運的考量。 通常對設計師而言，當工程師開始解釋工程的複雜度以及維運上的困難時，就會開始聽不懂和放空，他只想聽到「可以」或「不可以」。說實在話，其實也能夠體諒這種心態，要設計師理解這種東西真的太強人所難了，畢竟工程複雜度和維運的困難對於設計師來說並無法深刻的感受。因為對設計師來說，設計出來的東西能夠被實現是最重要的。 但對工程師來說往往不是這樣，我們學過軟體工程，有許多專業上的考量是設計師和 PM 無法深刻體會和理解的。他們不想聽你廢話解釋那麼多，反正再怎麼困難也是你工程師要想辦法去解決的，你跟我講再多我也幫不了你，我能夠做的就是給你時間，然後三不五時問你好了沒？所以，如果彼此無法把彼此在意的東西放在心上的時候，這樣的合作就會容易破裂。 我記得我經手的專案上面有一些命名問題，有一個名詞，他在與客戶對談的稱呼、和前端的命名、後端的命名、以及使用跨團隊共用元件的命名都不同，但其實是同一個東西，這對工程師來說非常的糟糕，我們很希望這些命名都能夠統一，藉此來避免溝通上的誤解，以及避免未來對於程式碼的誤判。但為了改這個命名，會動到許多專案之外，也需要其他團隊的配合。我們跟 PM 提過幾次這件事，但以他的立場而言，系統能夠穩定運作是最重要的，雖然他知道這件事情對工程師來說有點困擾，但可能他也感受不到這件事情的必要性以及對於工程師來說產生的痛點，對他而言就只是一個名稱上的不一致，並不影響系統的運作和使用，也不緊急，而且未來可能也有些不確定性，最後決策就是只能一直擺著。所以，對於同一件事情，因為立場不同，考量的角度也不同，所以在彼此心中重要的程度也會不同。 另一個常遇到的是關於元件的共用。設計師也知道不要重複造輪子這句話，所以他也希望改一個元件樣式的時候，其他所有看起來「長得像」的元件都應該要同步被修改，所以只要有一個地方他覺得應該要被改的沒改到，可能就會覺得你工程師沒有共用元件，程式碼寫得不好。 另一方面，很多設計師也希望元件能夠保持有彈性，因為有些地方他想要客製化。但事實上，共用跟保持彈性，是兩個互相拉扯的端點，對於程式比較沒有概念的設計師來說很難去掌握這件事情，只能從視覺上面憑感覺，而且「長得像」並不絕對代表他有辦法共用。你想想看，馬桶跟洗手台是不是長得很像？都是一個盆子的形狀，裡面可以裝水，也可以把裡面的水排掉，而且都常常會被一起放在廁所，他有什麼不能被共用的理由嗎？牙刷跟馬桶刷也都是一根把子配上刷子，都是用來清潔的，是不是也很適合共用？難道你會這樣想嗎？ 而且要做到「有彈性」這件事情是必需要事先規劃的，所以後來才被設計出來的元件要跟原本既有的元件共用又保持客製化的彈性，很容易就破壞原本程式設計的結構，那如果你要在不打掉他的前提之下共用他，很可能他就是疊床架屋的起點。這也常是工程師和設計師彼此溝通上困難的地方。 除了設計師如果願意學一點程式語言和邏輯這件事情很棒之外，工程師也應該要是著去理解美感和商業思維。我也常常聽到工程師說「真搞不懂差那 1px 是有什麼差，連這樣都要開 bug，浪費時間」。在顏色方面也是如此，設計師就是要在 hover 的時候有這個色號，但工程師可能貪圖方便就讓 hover 的時候加上一個透明度就了事，反正他覺得只要顏色有變化，看得出來是 hover 就好。我覺得這都是沒有尊重彼此在意的事情的一種體現。對設計師而言，視覺的呈現就是他的職責，差 1px 就是有差。換作是工程師，JS 在結尾有時候有分號有時候沒分號，你會覺得沒差嗎？反正使用者也看不到，程式也會動，你覺得這種理由合適嗎？不然幹嘛要設定 Eslint rules？所以我覺得真的是要將心比心。 第二個關鍵是「設定共同目標」。Kat 提到一個很重要的點，要對齊彼此想法的目標來做事，而不是只是指令式的要求對方。 如果你想造一艘船，不要號召工人收集木頭，發號施令，分配工作。反而要教導他們，對一望無際的大海心生嚮往。–《小王子》 舉的例子是請工程師把圖片調大一點。如果彼此想法沒有對齊，就只是會覺得對方在對自己發號施令，這種對話的感覺會讓彼此感到不舒服，那當然也就無法順利合作。所以透過更多的說明和對話來對齊彼此的想法和目標，例「如把圖片調大是為了提升餐點購買率，如果餐點圖片太小，就難以讓消費者看得清楚餐點細節，影響購買意願」。這時，工程師在執行任務時，他做的工作就不只是調整圖片，而是變成幫助提升購買意願。這也呼應到 Ant 大大講的，這能夠讓工程師體現他自己在做這分工作的價值。 主題：鳳 ‧ 極意？！ 講者：Paul Li簡報：https://blog.lalacube.com/mei/Reveal_phoenix_the_gokui.php?page=1共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FSVsZ1haXR-2bUhfcf_OYnA 我只能說，感謝 Paul 大大的分享，這場分享在技術上面真的受益良多。算是我在 WebConf 這兩天當中，覺得最值得的演講其中之一。 但因為技術的部分佔大多數，就不做特別的舉例了。心得就是，原來原生的 form 和 form element 能夠幫我們做到那麼多事，讓我們更體會他的美好優良之處，在這個分享面前，就是覺得自己非常的渺小，整個被洗禮了一番，哈哈。不過也因為如此，更得到了想要前進的動力。 主題：從零打造前端效能監控系統 講者：Summer文章：https://www.cythilya.tw/2023/08/12/build-front-end-performance-monitoring-mechanism-from-scratch-webconf-tw-2023共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2FCZTO4WGbRcuCcQfWgGkuig 相信前端效能是大家都很感興趣的話題。這次會議室安排在相對小間的會議室，但看來主辦單位是錯估了 Summer 大大的人氣，直接整個大爆滿，現場座無虛席，場面非常的壯觀。 這次 Summer 大大為大家帶來的這個題目非常實務，希望能夠打造一個： 可以檢測大量資料 自動檢測每一個 build 有點預知能力，能提早發現問題 方法足夠簡單、容易實作的效能監測系統。 相信上面這幾個點都有打中大家的痛點。 並且這次 Summer 大大也從自己的專案當中實現這個效能監測系統的做法，也很佛心的提供了 repo。直接展示了這個方法的可行性以及他驚人的效果。令人覺得非常印象深刻。 我覺得從這個系統設計的思維當中，也能夠看出一位資深工程師他專業的態度。以我自己的專案來說，通常我都是等到人家告訴我這裡效能不好，需要改善，我們才會去追查問題，然後針對問題來解決。 但是 Summer 大大的思維是完全不同的，他希望在讓使用者發現有問題之前就先把這個效能問題發掘出來並且解決，使用者不會知道他的貢獻以及在這系統背後所花的心思，使用者只會單純覺得這個好用的系統很理所當然。 身為工程師，我們真的非常敬佩這樣的精神和思維。透過這場演講，我們除了瞭解如何快速使用現成的工具建置一個效能監測系統之外，我們也看見一個資深工程師細膩的思維，我覺得值得令人學習也敬佩。 主題：從 2013 到 2023: Web Security 十年之進化與趨勢! 講者：Orange Tsai文章：http://blog.orange.tw/2023/08/2023-webconf-the-evolution-of-web-security.html Security 是我最近很想接觸的領域之一，當然也是我最不擅長的領域之一。 這次四大主題是架構、底層、不一致、跨應用，當然還有隱藏的第五大主題是前端安全。Orange 從這幾個主題當中舉幾個攻擊的手法以及例子，說實在的，真的令人目瞪口呆。有一種就算我全身穿滿了衣服，但在資安專家面前還是會覺得一絲不掛的感覺。原來我們的網站這麼容易就能夠被人家完全遠端控制，就好像在跑自家廚房和廁所一樣容易。 十年了，Web 在資安領域真的進步了嗎？ 雖然各個框架都有基本的防範，但攻擊手法也是日新月異，就好像流水一樣，只要有一點點漏洞就能夠鑽過去攻擊。隨著架構變成複雜，新的架構組合也變成新的攻擊手法。 唯一的心得就是，永遠不要覺得自己很安全。然後，比起恐慌，更應該去瞭解和關注這些資安的最新資訊和攻擊手法，雖然很難做到百分百，但至少努力過了，不要擺爛。就算我有機會被你攻擊，我也要讓你想破腦袋才有辦法攻擊我。 主題：酷！玩！啥鬼CSS！ 講者：Amos(李建杭)共筆：https://hackmd.io/@webconf/BkImQ0Ds3/%2F-mWY8npJSIaaxLrYaQ0Nvg 我也是從開始參加鐵人賽之後就有開始關注 Amos 老師。今天終於有機會聽到本人實體的演講！最殘念的就是今天忘記帶老師出版的兩本書來給老師簽名，我兩本書都有的說……😭。 這次的演講也真的很有老師的風格。一開始就先聊聊他最近在玩釣魚的事情🤣。其實我覺得這也是蠻有意思的，雖然我不太懂釣魚，也沒有什麼釣魚經驗，但我很喜歡看那些釣魚的人的 Youtube，像是鵝大人的那個釣魚頻道。不知道為什麼一看下去就會很著迷🤣。還有我也喜歡看萍哥，哈哈哈！ 明朝張岱有句名言：「人無癖不可與交，以其無深情也。人無疵不可與交，以其無真氣也。」意思是說一個人，沒點嗜好，此人無深情；沒有缺點，此人太虛假。我覺得真的是這樣，一個人如果沒有什麼嗜好，一輩子就是按照世俗定義的那樣按部就班過日子，對於工作賺錢汲汲營營，卻沒有自己的嗜好和生活，覺得那些都是浪費時間，那生活真的是非常的無趣。但或許對那些人來說，度過這種生活就是他的嗜好也說不定吧！所以或許我也應該改變我的想法，換個角度來看這些事情。 回到正題，Amos 老師這次也跟我們炫耀他做過的專案，或者說是瘋狂事蹟！？他說想要挑戰「用最少的 HTML 產出畫面效果」，然後做出一些你沒辦法相信居然是純用 HTML &amp; CSS 做出來的作品，看他沾沾自喜的模樣我也覺得很有趣。雖然在世俗的眼光中那只是普通的 CSS，實務上好像也並不是很有用，面試也不會考，但是在這種事情上面玩到極致的話也是能夠成為專家！這個是我很佩服 Amos 老師的地方，也是一種童心未泯。我想起我小時候很沉迷於玩 Windows 小畫家，把他當作 Photoshop 來玩，把自己喜歡的卡通、動漫角色一個 pixel 一個 pixel 在那邊用橡皮擦慢慢去背，搞了一整個禮拜就是為了讓自己有一張看起來與眾不同的桌面畫面，洛克人X各代裝甲和傑洛大戰黃金音速小子之類的🤣，我覺得那種心情大概就是這樣吧！沒有什麼實際的用處，但是做出來就覺得很爽！我們長大之後，是否還有事情是能夠讓我們保留這種童心？這也是值得我反思的地方。 最後 Amos 老師也提到 2023 年那些值得被關注的 CSS 屬性，例如利用邏輯屬性隨著語言書寫方向來適應性調整 style，還有三角函數、父層選取器、內容查詢等等，幫我們整理這些部分我覺得非常的用心！也很有收穫！ 雖然時間有限，但透過這些精要的提點也能幫助自己找到能夠去關注和研究的項目。最後就是下次一定要記得帶書來給老師簽名🤣。 結語這次能夠參與 2023 WebConf 真的非常值得，也非常過癮。身而為人，如果想要進步的話，就是需要常常這樣被洗禮一番。 這次大家都在回顧這十年來的轉變，也因著今年 AI 技術的突破和 ChatGPT 的問世，未來的十年更是難以令人預測。要怎麼樣在未來的十年當中，利用 AI 發展的當代優勢，能夠創造更美好更嶄新的未來，相信是我們這時刻所要面臨的課題。 這次也非常感謝各位前輩和大神的無私分享，這些分享給了我們許多的反思和啟發，能夠有這樣的社群活動，讓彼此能夠交流，彼此刺激，未來台灣軟體一定會越來越耀眼。 希望從今天起成為一個自己的里程碑，在未來的十年當中，也能夠有嶄新的突破，能夠找到屬於自己的領域！ 參考 WebConf Taiwan 2023 共筆文件(HackMD) 2023 WebConf Taiwan 準備好了！(Youtube) 活動網址","link":"/2023/08/13/2023WebConf%E7%82%BA%E8%87%AA%E5%B7%B1%E7%95%99%E4%B8%8B%E8%A8%98%E9%8C%84%E7%9A%84%E5%8F%83%E8%88%87%E5%BF%83%E5%BE%97/"},{"title":"iThome 鐵人賽系列書籍-完整出版攻略","text":"今天要來揭開從無到有，出版一本 iThome 鐵人賽系列書籍的神秘面紗。 有參加或聽聞 iT 邦鐵人賽的邦友多多少少會知道，從 2019 年開始，在 iThome 鐵人賽當中獲獎的人(包含佳作、優選、冠軍)，就有機會將自己的系列作品出版成書，創造自己的斜摃人生！ 從下定決心到眼冒金星小弟我當初也是看到這個令人熱血沸騰的活動，就下定決心想要寫個能夠得獎的系列來出個書試試看。但我過往也是對這部份完全沒有經驗也沒有概念，所以整個過程就是走一步算一步。 直到如今，自己的夢想終於達成了，所以很想要多留下一點資訊提供給想要透過 iThome 鐵人賽來出版書籍的邦友。當初知道自己真的能夠出書的時候，一方面是興奮，另一方面也是有點恐慌，所以上網爬了一下文，想要知道出書的過程大概是怎麼樣。 爬文的過程當然可以找到一些關鍵字，例如要仔細閱讀合約、要妥善利用時間寫書、要校稿、最後要宣傳。但事實上，光是知道這些關鍵字還是讓我很不踏實，到底整個流程是什麼呢？有什麼是我需要提早準備的？寫書可能會很忙，那到底會需要做哪些事情？寫的時候該怎麼寫？該用什麼格式？要不要自己排版？一大堆的問題在我的腦中飛來飛去，一時也無法整理出什麼頭緒。 所幸到後來在出版社的協助之下，順利的把書籍完成。因為自己已經開過圖了，所以希望把這些過程很「流水帳」的分享給大家。希望對於想出版書籍的人有所幫助。 出版流程時刻表分享我先來簡單分享一下我在從無到有出版書籍的過程中，遇到的所有的流程是什麼。讓大家對於整個全貌先有點概念。 不過，因為每一屆的得獎者也是不少人，出版社要服務我們這群人，也會有時間先後上的安排，這部份也會需要大家耐心等待，我就我自己經歷的部分跟大家分享： 以上就是我用時間軸的方式來紀錄我在這一年的經歷。希望提供給想要出書的人一個簡單的參考。 下面是幾個我認為過程中重要的階段： 得獎通知、與博碩小編聯絡 洽談前整理作者資料、新書規劃 與小編一對一洽談 合約簽訂 寫書，把 30 天系列文轉換成書籍，階段性交稿 完書之後，與編輯緊密討論後續出版事宜並校稿 上述是一些時間點和流程的紀錄，接下來會針對一些重要的時間點要做的事情進行細節的說明。 關於出書意願在 iT 鐵人賽當中，我們知道獲獎者有機會與博碩出版社合作，可以出一本自己專屬的書籍，他不是由很多人一起合著的一本書，而是只屬於「你」自己一個人出版的書(許多朋友聽到我出書都感到不可置信，一直不斷確認是不是我跟別人合著 XD)。你會得到許多人不可置信的眼光，但換個角度來看，你自己要「負責」這一整本書的內容，所以，在得到這份殊榮之前，自己會需要承擔這整本書的責任。 但是，出書這件事情，事實上也取決於得獎者的意願。如果你評估下來覺得自己很忙，或是有其他原因不想出書，可不可以呢？當然是沒問題的。 所以在得獎之後，會透過 Email 收到通知，並填寫一份「出書意願同意書」來調查得獎者出書的意願(請每日確認這些重要信件是否不小心被系統丟進垃圾桶，以免造成遺憾)。 之後就是根據得獎通知信件裡面的聯絡資訊，主動與博碩小編聯絡。下邊是我當時的訊息： xxx 小編您好不好意思打擾您，我是 2021 iThome 鐵人賽 Modern Web 組佳作得獎者 Taiming，作品名稱是「30 天擁有一套自己手刻的 React UI 元件庫」，主辦單位來信請我與您聯絡以討論後續出書進行事宜，相關部分再請您撥空協助，非常感謝您！ 與小編聯絡之後我是還蠻放心的，因為他真的很仔細，會 coach 你每一個時間點該做什麼事。對於作者來說，需要做的事情就是，把交辦事項好好做好，最重要的是，約定好的時間就一定要交件，不要拖時間。只要把握這些原則，後續一切都會很順利！ 關於出書，您可以先做哪些準備？以我這次的時程來說，出版社約在 Q1 之前把上一屆的鐵人作品出版完畢，接下來從 4 月開始，會進行我們這一屆的出版事宜。 那在這段時間當中，小編他要請我們進行下面這幾項功課： 填寫「作者基本資料表」(word 檔) 參考範例PDF寫出一份屬於您自己的「 自我新書規劃 」(寫在word 檔即可，不必拘束於格式，重點是內容) 提供一些前人出版的經驗分享文章給你看，如果先前跟我一樣沒有出版經驗，建議把這些內容認真看完 作者基本資料表這份表是一個 word 檔，裡面是一個表格，裡面的資訊是提供博碩文化出版及付款業務使用。 包含作者的姓名、電話、通訊地址、學經歷、付款資料等等的內容。 整理全系列文(word 檔) 請將您得獎的鐵人賽全系列文 (含「系列文組別 + 獎項 + 中文姓名 + 主題」、「目錄」、「內文」) copy 到一個「同一個 word 檔」 (含內文、圖、程式碼) (直接 copy 貼上即可，格式不須做任何調整，此份檔案僅供我們評估用) 這個部分就如上面說的那樣，就是上 iThome 網站把你的鐵人文章全部無腦 copy past 貼進一個 word 檔。你真的完全不用調整這裡的排版，就是一個苦工，慢慢把他貼完。如下圖所示： 這部份是為了幫助出版社快速評估一下你這本書會有多少頁數。以我為例，我整個貼完之後，約略 500 多頁，所以大概評估一下行距、字體大小，我成書之後預計是 350~400 頁。 這個步驟很重要，因為書籍的預計頁數會寫進合約書裡面，會寫一個大概的範圍。因為頁數也跟我們書籍的定價有關，也跟書籍的印刷成本有關。 自我新書規劃 參考範例 PDF 寫出一份屬於您自己的「 自我新書規劃 」(寫在word 檔即可，不必拘束於格式，重點是內容) 小編會提供你一個範例，作者需要參考這個範例，寫出自己的新書規劃。我自認為我是蠻認真寫的，下面是我新書規劃的大綱： 鐵人賽基本資料 作者簡介 暫定書名 本書特色 目標讀者 市場同質書差異分析 簡易的書籍大綱 鐵人賽基本資料這裡就是條列你的參賽主題、年度、作品摘要、作品網址、參賽組別、得什麼獎。 作者簡介這裡包含標點符號，我大約寫了 300 字。關於自己的介紹，這部份也要認真寫，因為後來這部份直接會寫進書籍封面裡面的作者介紹。翻開書籍第一頁會看到你的大頭照，然後下面的文字就是這裡的內容。你希望讀者對你這位作者留下什麼印象，就是在這裡好好發揮。 暫定書名當初參加鐵人賽的時候，我們給這個系列一個書名，以我為例就是「30 天擁有一套自己手刻的 React UI 元件庫」。但是這個名稱是為了比賽一時興起想的，基本上沒有什麼特色和亮點。所以作者需要在這個時候，重新省思一下自己這本書的特色，並重新調整一下書名，這些書名不見得是最後方案，而是你自己先思考過一次之後，後續會再跟編輯討論，在書籍進入最後階段，要根據書名來決定封面圖案的時候，會把書名定下來。我當初自己想的書名是這些： 30 天擁有一套自己手刻的 React UI 元件庫 媽！我一不小心就刻了一套 React UI 元件庫！ 手刻派的福音！原來擁有一套 React UI 元件庫不難！ React UI 元件庫：剖析與實戰 在出版前夕，編輯會跟你再次討論書名，編輯部內部也會一起討論，看怎麼樣用精簡的文字凸顯這本書的亮點，並讓人留下深刻的印象。總之，最後我的書名是「哎呀！不小心刻了一套 React UI 元件庫」。這個書名真的是有達到他的效果，讓人留下深刻的印象，怎麼說呢？自從大家知道我出書之後，都會開我玩笑，說「哎呀！不小心出了一本書呢！」、「你真的是太不小心了！」、「哎呀！不小心在路上遇到作者！」，各種「哎呀！XXX」和「不小心XXX」的照樣照句梗會打趣的充斥在生活當中，讓我深刻的體驗到這個書名的威力！ 本書特色這部份的內容，到最後是被放到書籍的封底，所以要用幾個強而有力的亮點特色來介紹這本書。因為這部份我想得還蠻完整的，所以幾乎沒什麼改就直接被編輯貼上去了，可以參考我的書籍封底。在書籍上架到網路上的時候，會有書籍介紹，也是把這邊的內容貼上去： https://www.books.com.tw/products/0010938824 目標讀者因為接下來我們會重新組織一下文章的內容變成書，所以這裡需要我們重新靜下來思考我們的目標讀者到底是誰，好好確定一下這裡的內容之後，對之後文章內容的調整會比較有方向，你的文章用詞、內容也會受到這裡的影響。這裡我有條列幾種讀者可能會來買我的書，然後我也說明一下這每一個項目，舉幾個例子： 剛開始接觸 React 的入門者如果你是剛開始接觸 React 的入門者，這本書能夠成為你邁向下一步的基石，每一個元件對你而言等於是一個練習題，當你能夠完成這所有的元件，你會發現，未來你要開發的頁面，上面幾乎所有的元件你都已經在這裡練習過了。 只會使用人家寫好的套件的工程師如果你發現你只會用現成的套件，當設計師和 PM 要求你做一些客製化的微調，你總是會因為這些套件的 API 不支援，而常常無法滿足他們的需求，常常需要找理由來跳過某些你做不出來的功能，那這本書很適合你，因為你將要脫胎換骨，成為一個面對不同奇怪的需求都仍然能夠充滿勇氣的人。 新手 PM身為一個 PM，你有時程上的壓力，你需要瞭解這個功能或是元件到底是不是真的很困難和很花時間，但不太瞭解工程實作面的你，常常深陷工程師與設計師各說各話的窘境，沒想到最後還是把決定權交給你，而讓你不知所措、頭痛不已，你只能擲筊問老天爺。這時或許你可以來讀讀這本書，你可以掌握每個元件要完成會需要實作哪些細節，讓你在做決策和安排工作的時候更有自信。 我總共列了 5 個項目，上面舉 3 個為例給大家參考。這個部分也會放在封底，不過因為我封底的內容太多了，所以最後我有做一些取捨。 市場同質書差異分析我自己上博客萊和天瓏去找幾本跟 React 和實作有關的書，因為我的書也是跟這些主題比較相關，然後針對這幾本書，我去簡單條列分析這些書的主題、特色。分析完這些書籍之後，開始會對於自己的書有一些想法，會找到自己的書跟這些書不同的地方，「我有你沒有」，大概是這種東西會從腦中浮現出來，然後我在這裡也會條列一下我自己的優勢在哪裡。 我的優勢： 目前還沒有找到有一本書是跟我一樣從頭到尾自己刻一套元件庫或是解析元件庫的。 每個元件之間是完整且互相獨立的，不一定要整本書從頭讀到最後才能夠完成該元件。 每個元件的小章節都具有相同的結構性，皆包含元件介紹、元件分析與討論、介面設計、元件實作等四個部分，方便讀者針對某特定元件查閱。 跟著我的書打造完的元件庫，甚至可以直接使用在自己的專案或公司系統上，不需要像其他的實戰書一樣，還需要自己想辦法把該書的主題專案內容自己做轉換提取才能使用在自己的專案上。 這是我當時初步的想法，後來是不是真的是這樣，也需要跟出版社編輯一起討論。 簡易大綱這邊就是稍微重新規劃一下自己的大綱，因為當初在參加鐵人賽的時候，不見得每個人一開始就會把整個大綱脈絡規劃得那麼好，所以可以趁機在我們開始進行書籍的重新組織之前，先做一個整體脈絡上的調整。 與小編一對一洽談到底談了什麼內容？洽談前的準備為了有效率的進行洽談，在事前作者也需要作一點準備。如果在此之前，我們已經好好的完成「自我新書規劃」，我覺得準備的項目就已經至少完成一半了，至少作者的心理狀態已經比較進入狀況。接下來還有一些可以準備的項目，小編會交代你，這裡我也簡單介紹一下： 閱讀書籍樣章範例「樣章」的意思，就是先請作者試寫個一到兩章左右的內容提供給小編。目的是為了先確定後續的寫作方向和細節。先撰寫樣章的這個階段，是為了避免沒有經驗的作者在整本書寫完之後才交稿，發現整個內容不符出版預期而需要大改。所以先有個樣章的話，可以先提早發現問題，提早討論，提早調整，這樣在繼續進行後續的書籍撰寫的時候能夠符合預期。 在洽談之前，我們先閱讀小編提供的樣章範例，可以先在撰寫樣章之前，大概想一下自己會怎麼寫，然後如果提早想到什麼問題，可以先列下來，洽談的時候跟小編討論。 對於出書想瞭解的問題因為我真的是一個出版小白，下面是我當初條列的問題： 關於撰寫方式想請問撰寫的方式，是自己用 word 撰寫，然後 line 給小邊嗎？撰寫時就要自己處理排版、美編了嗎？還是說先專注在文字的內容，之後會再經過排版？若排版需要自己排版，是否有一些排版規則或模版可以參考和遵循？書本中若需要圖片輔助，出版社這邊是否有推薦的圖庫可以使用？使用圖片的解析度建議？原本鐵人賽的內容是否建議脈絡上再調整？想瞭解建議的方式會需要作者自行決定要彩頁還是黑白嗎？還是會根據內容適不適合來決定呢？或是要根據成本考量？ 關於時程交稿日期的討論，關於樣章、初稿、校稿日期的討論 關於費用因為是第一次出書，我對於自己的收益沒有很在意，只是單純希望能夠成功出版、合作愉快。但是想要了解這過程中是否需要支付其他費用，希望能夠先有準備，例如： 透過博碩協助出版的書籍，是否需要支付其他服務費呢？小編服務費、排版的費用、美編的費用、出版印刷的費用…等等。 其他另外因為自己比較沒有經驗，能夠想到的問題就是上述的部分，可能過程中有很多狀況是自己不曾遇過，所以也很難去想到該問什麼問題，如果有其他作者提出的重要問題，或是出版社這邊覺得我們會需要了解的問題，希望也能夠多多了解，謝謝。 準備一段 5 分鐘輕鬆自我介紹 + 對書籍內容說明這部份也是小編請我準備的內容，應該也是為了幫助小編更了解作者，也更了解這本書，但因為我先前文字準備的內容已經很完整了，所以也幫助我在這階段更順利和快速的進行。 洽談的過程準備好上述這些項目後，會先 line 給小編，讓小編先有個準備。並且跟小編敲定好時間之後，會進行洽談的通話(因為疫情緣故，我們是線上通話討論)。 對於自己準備的問題討論 討論書籍的介紹、特色、亮點、書名 說明書籍製作流程 說明合約注意事項 確定交稿日期(樣章、全書1/2、全書) 小編會很仔細的對於上述這些項目跟你進行說明和討論，整個過程平均是 1 小時上下，但小編說也有遇過 1.5–2 小時的作者 XD。 建議我規劃專欄對談的過程一直提到一個專有名詞叫做「專欄」，小編希望我多設計幾種專欄，讓內容看起來更活潑、有系統性。我當時是連專欄是什麼都不知道的作者。像這部份也可以直接提問沒關係。 總之，專欄就是我們會在書本裡面看到的一些獨立有主題的小框框，裡面放一些補充說明，或特別想要強調的東西，例如「實戰經驗分享」、「踩雷經驗談」、「給新手的話」這種，因為我們過往在寫 30 天系列文的時候，基本上就是想到什麼寫什麼，有分個脈絡就差不多了。但因為我的內容有理論性的東西、有實作的內容、有經驗分享、有作者建議，全部都混在一起，看起來其實沒有什麼組織。所以專欄就是幫助我們將這些部分獨立抽出來，讓我們書籍脈絡更順暢，不會一下子講這個，一下子講那個，全部混在一起。 關於撰寫內文及排版然後因為後期完稿之後，會有專門的排版人員挑一些版型來編排你的內容，所以你不用自己去想怎麼排版，你只要認真把內容、脈絡、專欄準備好就可以了，美編的部分不需要作者自己處理。下面舉例，左邊是我用 word 撰寫的，右邊是排版人員排版後的： 黑白印刷還是彩印還有一個很常討論的問題，就是要黑白印刷還是彩印？這部份也會跟小編一起討論，這邊不能只考慮到作者喜好，也會需要考量到印刷成本。對作者來說，當然能夠彩色就彩色，但如果不能彩色，有沒有什麼替代方案？這部份也會一起討論。 圖片著作權在寫書的過程中，為了輔助說明，或為了不要讓整本書看起來太單調，我們多多少少會需要一些圖片穿插。 但是邁入寫書的階段，圖片的使用權就變得特別重要。但這部份的話，以我的著作來說，我的圖片幾乎都是元件的展示圖，也就是說都是我截圖自己的實作畫面。所以幾乎是不會遇到版權問題。 另外也有需要用到圖片的地方，以我的書為例，實作卡片元件或照片牆元件會需要一些圖片，那我就是拿自己以前拍的照片，或是跟有在玩攝影的家人朋友取得他們授權的照片，我是用這樣的方式來解決圖片版權的問題。 關於合約它是一份制式合約(所有國內作者都是用同一份)，基本上會修改的部分只有「書名」、「書號」、「作者」、「版稅」、「開本」、「印色」、「預計頁數」、「預計售價」、「交稿日」、「預定出版日」，若有不清楚或疑惑之處，請在看完整份合約之後，一次以條列方式傳給小編，小編會仔細為您解惑。 所以對於合約的部分，第一次出版的人可以不用太擔心，但還是要盡到作者自己的責任，至少合約每一條都看過一次，避免彼此有誤會。 對我來說，完成這本書的目的不是賺錢，是為了累積經驗、達成自己一個小小的夢想、交朋友、曝光一下自己、建立知名度，達到這些目的會遠比在那邊計較多少百分比的權利金來得重要。當有了上述這些部分，他後面會帶來的價值會遠高於計較的那些權利金。 這裡再特別補充一下，自從博碩跟 iT 鐵人賽合作之後，會發現有一些其他的出版社也會主動找上門來，拜託作者能不能讓作品給他們出版。我也是其中有遇到這樣狀況的人之一。 因為我們過去沒有出版的經驗，也跟出版社不熟，所以我們幾乎不知道怎麼選擇出版社。唯一能夠判斷的方式就是「見錢眼開」。所以很多其他家的出版社會利用我們這一個弱點來進攻。因此也可以看到市面上有少數幾本鐵人賽系列作品不是博碩出版的。 其實要選擇跟哪一家出版社合作也是作者的自由。但我可以分享我個人的經驗給大家參考。今年我很拼，我大膽的把兩個鐵人賽系列作品分別給不同家出版社出版，今年當季的系列給博碩，前幾年有得過獎的給另一家出版社，我主要是想說，既然我沒有經驗，我就直接找兩家實際執行來比較，這樣我以後就知道怎麼選了。另一家也是用比較高額的權利金來吸引我，要我兩本都給他們，但是我想說既然我沒有經驗就不要賭那麼大，至少有一個基本盤。 我直接講結論，我兩本書的全書幾乎是同時完稿，並都交回去給出版社，博碩合作的書籍我已經順利出版，並且首週就進入暢銷排行。另一家出版社到現在是什麼狀況都還不明朗，之前也因為封面不符我預期被我要求重新設計，過程當中也有許多令我覺得不夠專業的地方。 我當初還不太會看合約，現在我比較會看了。博碩出版社的合約真的是很完整，考慮到的面向也很完備。現在我回去看另一家出版社的合約，我發現除了權利金比較高之外，「頁數」、「建議售價」、「出版日期」這些都沒有規範。所以導致對方目前有狀況 delay 我也無可奈何。 另一方面，出版社是不是經驗豐富，有沒有固定的 SOP，團隊成員是否完整，這些也都很重要，因為跟作者後續合作順不順暢很有關係。如果對方編輯不夠專業，你自己的建議都比他給你的建議好，然後資訊也不透明，設計出來的東西也不到水準(封面字體很多元，整個畫面只有色塊和文字，稱不上圖片，比長輩圖還要難看)，回個訊息拖拖拉拉，來回一個問題就要拖一兩天，目前對方遇到什麼難處導致 delay 也無法知道，就算對方開給你很好的條件或權利金，但由於你的書一直無法出版，終究你一毛錢也拿不到。說不定你為這本書付出的努力也都會白費，而且因為已經簽訂合約，出版權已經給他了，所以也不能請別家出版社幫你出版，這樣的狀況也是作者不樂見的。 合約授權的範圍也很重要，例如也有出版社他比較擅長電子書，而實體書比較沒有經驗，但是合約裡面卻包含所有的簡體、繁體實體書、電子書以及海內外各種線上、線下閱讀市場等等。很有可能後來導致你出版了電子書之後，他以銷售不佳為由，因成本考量拒絕或拖延實體書的出版。銷售不佳的原因你也很難追究，因為出版社也可以跟你說因為你的內容不符消費者口味，跟他們的責任無關(即使你的鐵人作品已經獲得評審的青睞)。這時就會陷入一個對方拿著你所有的授權，卻遲遲不幫你出版的狀況。 而且就算後來順利出版了，也要考慮銷售和通路的問題，權利金比較高真的會賺到比較多錢嗎？如果對方合作通路不多，賣不了多少本，對作者而言除了金錢上的損失之外，你這一年的努力也都浪費掉了，而且也因為銷售或曝光不佳而得不到什麼知名度。很多作者可能這一輩子就只想出這一本書而已，因為要出版一本書真的很不容易。 總結來說，我不便評論別家出版社的好壞，只是提醒作者要留意上面的狀況。或許真的有更適合你的出版社，但如果你真的沒有經驗，不知道怎麼做選擇，我真心跟你推薦博碩，我保證絕對沒有收他們的錢幫他們打廣告 🤣，我是憑著良心說的，我可以用我目前順利上架的這本書以及他所帶來的正面成效跟你掛保證。 以上述的經驗來說，評估一家出版社是否值得信賴，你可以問自己下面幾個問題： 是否跟 iThome 鐵人賽活動有正式合作關係？ 過往鐵人賽作者在他們家成功出版的書籍有多少？市面上是否有自家出版的作品？只有一兩本還是很多本？還是都是轉賣別人的書？ 對方是否擁有豐富的出版經驗，擁有完整的出版團隊和行之有年的出版流程？還是只是剛開始開拓這塊市場，想來分一杯羹而已？(不完整的團隊可能會因人力不足而省略許多嚴謹的出版流程，要求作者自己負責，例如排版、校稿等等，甚至設計師等專業人員都是外包的) 是否對方還沒有市場上的作品，就急於跟作者簽下所有形式的出版權？ 合約書的規範，是否顧及作者與出版社雙方的權益？還是偏重於保護出版社？ 合約書中是否詳細規範「預計頁數」、「預計售價」、「交稿日」、「預定出版日」等細節？(規範得越詳細，越能在這些項目上給予雙方保障，否則只會製造讓對方鑽漏洞的機會) 對方是否用高得不合理的版稅來引誘你，讓你願意妥協一些你心中仍有疑問的部分？(出版書籍絕對不能只有考慮版稅，切記！) 上面這些部分是整理我自身的經驗，而非絕對的判斷標準，但是多想一下，或許可以幫助你提早避免不必要的麻煩。 如果你真的完全沒有經驗，純粹是想出版一本書來達成自身的里程碑。那我真的建議你收起那即使只有一點點的貪念，循規蹈矩的跟活動官方建議的出版社合作。 交稿時間點 最後很重要的就是交稿時間點，小編會跟你敲定接下來要交稿的內容以及時間，以我為例： 06/13(一) 樣章交稿 08/01(一) 全書一半交稿 09/20(二) 全書交稿 12/31(六) 最晚出版日期 這部份是當初討論的時程，最後因為我有提早完成，所以出版時間有提早。 精神喊話最最最後！因為在敲定這個時程的時候我還蠻有壓力的，大家可以看一下上面的時間，以及我們通話時間是 5/31。 由於我是一個出版小白，對於整個流程都不了解，所以原本可以讓我提早準備的時間我也不知道要準備什麼。等到洽談之後，才發現後面的時間超級無敵趕。會這麼說是因為我除了出版的事情以外，我生活中還有很多其他排定的行程事項要做，這部份我也詳細跟小編說明我的時程壓力來源。 不過既然已經下定決心要出書了，就是作者自身要排除萬難來達成上面的任務，這些定下的時間絕對要遵守，所以我記得一個橋段，就是小編要我親口跟他精神喊話「我一定能夠做到！」，沒有聽到我親口說出這句話他不放我走 XD。要說出這句話真的需要蠻多勇氣的，不過大丈夫一言既出，駟馬難追，既然都說出口了，硬著頭皮也是要把書寫完。 把 30 天系列文轉換成書籍是怎麼樣的過程？關於書籍編排這個過程，其實每個作者我覺得應該差異性會蠻大的。建議有興趣的人可以去找幾個鐵人賽系列書籍，然後去比對他當初在 30 天系列裡面的內容，就可以發現其實每個人都蠻不一樣的。有些人的內容會差不多，有些人整個編排都改掉，甚至一眼看不出是同一個系列。 所以，會根據我們跟小編討論的方向來調整書籍的編排內容，這部份是出版社的專業，我就不多說了。 但我分享我自己的例子，因為我當初參加鐵人賽之前就下定決心一定要出書。所以我在規劃整個鐵人賽脈絡的時候，就有先提早思考過這個問題。考慮到我題目的特性，30 天要刻一套元件庫，每天一個元件。那表示，可能要把我的系列當成字典來寫，這樣在查找的過程會比較好找。什麼意思？就是說，我每一個元件都會有固定的內容： 元件介紹 參考設計 &amp; 屬性分析 介面設計 元件實作 原始碼及成果展示 我每一篇都長這樣，缺點是有點乏味。優點是每一個元件章節的內容是可被讀者預測的。可以很方便查找。 可能因為我的脈絡很工整，所以出版社就沒有請我在這裡多著墨。我主要做的事情就是順一次裡面文字的脈絡，把專欄抽出來整理。 然後有哪裡寫不好的，或是要補充的，就稍微作一下調整。 圖片編排整理的過程當中，我們需要為圖片編號。當初寫鐵人賽的時候一般人不太會這樣做，但是寫成書的時候會需要整理這個部分。並且要留意圖片的版權、解析度(2 倍圖以上)、圖片內容是否合宜、圖片內容是否有簡體字等等。 圖片的部分，除了內文要穿插並且為他編號之外，也要特別準備一個資料夾放圖片的原檔，圖片命名以編號命名，提供排版人員使用。 寫鐵人賽時如果一開始沒有想過自己會出書，或者不太知道出書流程，在這一關會花費比較多時間，在這一關的時候會需要重新整理圖片符合上面的條件。 時程上的節奏再次複習一下我的交稿時間點： 06/13(一) 樣章交稿 08/01(一) 全書一半交稿 09/20(二) 全書交稿 12/31(六) 最晚出版日期 事實上，這些時程都還蠻趕的，然後寫書的過程也是一條孤獨的道路，沒有人知道你在幹嘛，你就是要把自己關起來一個人在那邊忙。所以我覺得自己的自制力很重要，一定要有自己的規劃，然後想辦法達成，每天要整理多少量，這些自己要算好。 從樣章到全書的一半，我只有一個月半。從全書的一半到全書交稿，也差不多一個月半。全書完成之後，就是緊湊的校稿行程。 關於校稿編輯修正及排版事實上我對校稿的認識是還蠻少的，但我可以分享我在這階段做的事情。在這個階段，就是我們已經把全書都交給出版社之後的那一個階段。 出版社排來跟我合作的編輯，他第一次幫我把全書都看過一次，有錯字的地方直接幫我改掉(我覺得超佛心的)。當然他看不懂的地方會跟你隨時確認，我們要做的事情就是盡可能早點回覆他。 全部看完之後，他會先交給排版人員幫我們排一個章節。有點像是我之前提到的樣章的概念。然後先給你看過版型可不可以，沒問題的話，大約一到兩週的時間，會幫你把全書排版完成。 校稿方式之後就會把這個排版完的 PDF 檔給作者，讓作者進行第一次校稿。校稿的方式是直接在 PDF 上面註記，之後回傳這份 PDF，讓他們進行修正。 然後我自己的方式是我額外再準備一個 word 檔，用來註記每一個要校正的地方，例如第幾頁的哪裡有錯字，要改成怎樣，或這裡的句子是要怎麼改，也註記一下為什麼我要這樣改，透過這樣的方式減少彼此的誤會。 校稿總共有三次，作者挑出要改的地方，請出版社修改 PDF，這樣的一次來回叫做校稿一次。 要校稿什麼？ 減少錯字第一點很重要的就是要盡量減少錯字，所以我們勢必會把全書仔細再看一次，把錯字的地方挑出來。 語句通順常常我會發現書籍裡面的句子，雖然是自己寫的，但回過頭來看會不知道是什麼意思。或是當下用的句型或用詞讓整個脈絡變得複雜、難以理解，這部份會需要換句話說，讓他變得簡單易懂。 避免大陸用語現在雖然是一個多元的社會，但繁體中文書還是希望避免大陸的用語，而且聽說有些讀者會對這些用語感到反感。這部份的校正其實還蠻難的，因為平常生活很多用詞已經生活化到分不清楚到底是不是大陸用語了，這些部分會需要花一點心思上網去研究。最好的方式當然是一開始寫文章的時候就避免，不然校稿的時候會很花時間。避免口頭禪人在講話的時候，難免會有一些口頭禪。轉換成文字之後，口頭禪會變得特別明顯，這真的是還蠻尷尬的，所以校稿的時候我也會特別挑出我自己常用的幾個口頭禪。 內容校正我們寫的是技術用書，有時候難免觀念、程式碼會有些錯誤，所以如果有發現這一類的部分，也需要在校稿的時候修正。 目錄、圖片編號這個部分也是容易忽略的校稿細節，書籍裡面的圖片編號或索引一多，數字很有可能就會寫錯，這個也要留意。 留意圖片裡面是否有簡體字有時候截圖裡面會有簡體字，記得也要檢查。 QRcode/超連結確認在程式用書裡面，會用到許多超連結或 QRcode 給讀者輔助學習，但很有可能連結變了或 QRcode 壞掉，這部份我自己保險起見都會再全部掃過或點過ㄧ次。 程式碼確認技術用書裡面會有一些程式碼，要留意這些程式碼有沒有因為排版的關係不預期的被換行或調整，像寫 Python 這類對於縮排和換行比較嚴謹的程式語言，會需要特別留意。因為出版社的編輯大部分不見得會寫程式，所以這個需要作者自己花心思注意。 用詞一致性舉例來說，「Button」、「button」、「按鈕」是一樣的意思，但是在文章中交替使用，會顯得很雜亂也不好閱讀。「Facebook」、「FB」、「臉書」也是一樣，對作者而言可能很直覺，但對有些讀者而言會造成混亂或誤會。 除了上述這些，當然還有許多可以修正的方向，不過因為我的經驗有限，就只能做到上面這樣了。 二校和三校的時候，除了上面這些要點需要再檢查一次之外，很重要的是，也要把前一次請出版社調整的內容再確認一次，因為很有可能對方改的東西跟自己的想像不符，所以再次確認是很重要的。 關於推薦序邀稿推薦序的邀稿跟校稿幾乎是同一時間在進行的。首先，我們要先去各大臉書專頁或部落格找找看有沒有一些適合受邀者的聯絡方式(出版社不適合幫你找，作者自己邀約，對於受邀推薦者才能展現誠意)(如果未來有人想要找我推薦，我也很榮幸 🫣)。我去肉搜一番，就順利有找到自己喜歡的部落格的站長等等的 Email，然後寫信問問他們意願。 推薦者大概找 3 人左右，編輯建議是社群上或在業內知名的人，透過他們的知名度、協助宣傳也能夠幫助我們書籍的曝光。更重要的是，透過這個契機，有機會跟這些大神們交朋友、交流，這讓我學習到很多。 因為這部份的流程或是行規我也是完全沒有概念，所以我也問了蠻多問題： Q: 推薦者可以找幾位呢？A: 三位左右 Q: 內文裡面的推薦跟封底的專業推薦是同一群人嗎？A: 封底的專業推薦可以擷取內文裡的部分內容，所以是同一群人沒問題。 Q: 推薦內容大約需要多少字數呢？A: 內文的推薦內容約 500~1000 字，一到兩頁左右。 Q: 需要給推薦者多少時間呢？A: 差不多要給推薦者 2 個假日的時間看內容 上市之後，出版社會給我一些樣書，其中裡面有幾本是要送給推薦者的，一人一本。 因為推薦者需要看過原稿才會決定要不要幫你推薦內容，不過此時因為我的排版還沒完成，所以跟編輯討論之後，他覺得我的原稿已經相當完整，所以當推薦者表達意願之後，我先提供原稿給他們，後來排版完之後，我有即時再寄送排版完的初稿給推薦者。 下面是我當初擬的邀請稿： [推薦序邀稿] 鐵人賽系列書籍之推薦序邀稿 xxx 老師您好我是 iThome 鐵人賽與博碩出版社合作，即將要出版書籍的作者陳泰銘(Taiming)，老師您是在前端領域上為之專精，並且擁有社群影響力的領導者，同時我也是您的粉絲，不知道是否有榮幸能夠邀請您為我即將出版的書籍撰寫推薦序呢？我這次要出版的書籍是「哎呀！不小心刻了一套 React UI 元件庫：從無到有輕鬆上手」，內容是關於 React UI 元件的介紹、剖析與實踐。若您願意撥冗，我這邊會以 Email 寄給您目前完整的原稿初版，目前出版社對推薦序的要求是希望一位推薦者能有一至兩頁的推薦內容，約五百到一千字左右。推薦序截稿日期為 9/30 前。書籍出版之後，也會贈與一本書籍以表達感謝。若您願意接受邀請，再請您在 9/16 前播空以 Email 回覆即可，我會在收到您回覆之後將書籍原稿寄給您，期待您的回覆，謝謝。Best Regards,Taiming 關於出版前的事宜封面主圖因為鐵人賽書籍的封面幾乎都會有一個模版，所以對作者而言就是要決定書籍的主圖。 如果跟我一樣不會自己設計，也可以全權交由專業的編輯來協助。編輯有提供我 Shutterstock 這個知名的圖庫，我們就進去找一些覺得適合的主圖提供給編輯參考。同時編輯部也會幫你找一些，最後會整合大家的意見來決定最後的封面。出版社也會把最終的主圖從 Shutterstock 買下來給這本書用。 封底封底的內容一般會包含「本書特色」、「目標讀者」、「專業推薦」，這些部分我們在先前「自我新書規劃」就已經提過了。 最後也有一個部分是要為這本書想一個標語，這部份到時候編輯也會跟作者一起討論。 關於博碩宣傳管道在實體書上架之前，博碩的網站會先上，編輯會請你確認裡面的書籍介紹內容是否有誤。https://www.drmaster.com.tw/bookinfo.asp?BookID=MP22243 博碩這邊會協助出版的宣傳，包含博碩 FB 粉絲團 PO 文(含下廣告)、博碩YT頻道影片、天瓏書局Banner。 當然，親朋好友、同事先宣傳過一次，然後我也參考一些鐵人書籍出版的前輩，因為我是寫前端的，所以後來我也上「Front-End Developers Taiwan(4.6 萬位成員)」和「JavaScript.tw(3.3 萬位成員)」去各 PO 一篇文章，宣傳我的書，當然自己的臉書、IG，朋友的臉書 IG 也都借我宣傳，真的非常感謝他們。 關於博碩的銷售通路首先，比較為大眾所知道的，天瓏書局可以找的到我們鐵人賽系列的實體書籍。博客來、蝦皮、墊腳石、樂天、金石堂等等你大部分想得到的電商，也都可以網購買到我們的實體書。 電子書的部分，博碩有長期合作的十大電子書平台，例如，博客來、讀墨 (Readmoo)、Pubu、Kobo樂天、Googleplay、凌網 (Hyread)、UDN (聯合線上)、讀冊生活、台灣漫讀 (Bookwalker)、mybook，書籍出版的合約上也會有關於電子書的相關項目。 而且電子書的部分，不是那種隨便把文字圖片的電子檔就上傳的那種未經排版的電子書，因為專業的出版社會顧及到讀者的「閱讀體驗」，因此透過出版社在這些通路上的電子書，也都會透過專業的編輯把書本排版得美美的！ 成果分享這次出版的經驗讓我收穫很多，當然在銷售方面也獲得不錯的成績，例如上架預購第一週就獲得天瓏 7 天中文熱門暢銷第四名！ 實體書上架之後，也曾獲得天瓏 30 天中文熱門暢銷第 7 名。 上面這些都是令人喜悅的事情，但最重要的是我在這次出版的過程中學習到很多部分，不管是出版的流程也好，還有校稿的過程也修正自己的觀念，也有熱心的推薦者給我很多寶貴的建議，可以跟這些部落格大神交流，讓我能更精進自己，這些都是很重要也很珍貴的收穫。 從上述的分享當中，我們知道要出版一本書也是要經過許多的努力，還有許多人的協助才有辦法完成。不過真的出版完一本書之後，就覺得這一切都很值得，因為這些收穫會影響我接下來的人生路和職涯發展。 所以有機會的話，非常推薦大家勇於嘗試，如果可以的話，也一起交朋友，彼此交流吧！ 希望這篇文章的分享，能夠對想要出書的人有所幫助，也希望能夠幫助在這一年當中，不斷被我的問題摧殘的編輯，拉近作者與出版社的距離，透過這篇文章回答這些常見問題。 歷史紀錄","link":"/2022/09/22/iThome%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%B3%BB%E5%88%97%E6%9B%B8%E7%B1%8D-%E5%AE%8C%E6%95%B4%E5%87%BA%E7%89%88%E6%94%BB%E7%95%A5/"}],"tags":[{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"React小聚","slug":"React小聚","link":"/tags/React%E5%B0%8F%E8%81%9A/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"UI&#x2F;UX","slug":"UI-UX","link":"/tags/UI-UX/"},{"name":"心得","slug":"心得","link":"/tags/%E5%BF%83%E5%BE%97/"},{"name":"鐵人賽","slug":"鐵人賽","link":"/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"},{"name":"出版","slug":"出版","link":"/tags/%E5%87%BA%E7%89%88/"}],"categories":[{"name":"Web Development","slug":"Web-Development","link":"/categories/Web-Development/"}],"pages":[{"title":"About me","text":"About page","link":"/about/index.html"}]}